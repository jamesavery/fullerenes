This is a list of open bugs and similar kinds of misbehaviour.  This is not a list of feature requests or plans.

----------------------

(2013-12-06, lukas)
running valgrind on app-gs-ex on my (lukas) desktop yields multiple instances of the following error

==16297== Memcheck, a memory error detector
==16297== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==16297== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==16297== Command: ./app-gs-ex
==16297== 
==16297== Conditional jump or move depends on uninitialised value(s)
==16297==    at 0x417841: PlanarGraph::compute_faces_oriented() const (planargraph.cc:199)
==16297==    by 0x418193: PlanarGraph::compute_faces(unsigned int, bool) const (planargraph.cc:119)
==16297==    by 0x4185AB: PlanarGraph::compute_faces_flat(unsigned int, bool) const (planargraph.cc:243)
==16297==    by 0x418FC2: PlanarGraph::dual_graph(unsigned int, bool) const (planargraph.cc:61)
==16297==    by 0x403D6A: main (gs-ex.cc:51)
==16297== 

which means, that 'layout_is_spherical' may be uninitialized when 'PlanarGraph::compute_faces_oriented()' is called.

---------------------------------

(2013-12-06, lukas)
running valgrind on app-gs-ex on my (lukas) laptop causes the following slightly worrying error

==6451== Memcheck, a memory error detector
==6451== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==6451== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==6451== Command: ./app-gs-ex
==6451== 
vex amd64->IR: unhandled instruction bytes: 0xC5 0xF8 0x77 0xE8 0x90 0x9F 0xFF 0xFF
==6451== valgrind: Unrecognised instruction at address 0x409ba8.
==6451==    at 0x409BA8: Graph::shortest_cycle(int const&, int const&, int) const (new_allocator.h:94)
==6451==    by 0x40A43F: Graph::shortest_cycle(int const&, int) const (graph.cc:180)
==6451==    by 0x4108B0: PlanarGraph::tutte_layout(int, int, int, unsigned int) const (layout.cc:19)
==6451==    by 0x40403C: main (gs-ex.cc:50)
==6451== Your program just tried to execute an instruction that Valgrind
==6451== did not recognise.  There are two possible reasons for this.
==6451== 1. Your program has a bug and erroneously jumped to a non-code
==6451==    location.  If you are running Memcheck and you just saw a
==6451==    warning about a bad jump, it's probably your program's fault.
==6451== 2. The instruction is legitimate but Valgrind doesn't handle it,
==6451==    i.e. it's Valgrind's fault.  If you think this is the case or
==6451==    you are not sure, please let us know and we'll try to fix it.
==6451== Either way, Valgrind will now raise a SIGILL signal which will
==6451== probably kill your program.

